{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4cdc667a-c109-48d6-b2dc-9d9b59e229fc",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Análisis de la evolución de la tasa de desempleo en Perú durante los últimos años, identificando diferencias según la edad y género\n",
    "\n",
    ">Equipo: Los Miraculous\n",
    "\n",
    "#To-do:\n",
    "Análisis de estadisticas metricas, comparar resultados con otros estudios, describir lecciones aprendidas, sugerir posibles \n",
    "acciones a seguir basados en los resultados del estudio,\n",
    "responder algunas preguntas sin respuesta, medidas de variabilidad:\n",
    "promedios, desviación estandar, varianza, valores p. Análisis de tendencia, correlaciones entre varias variables\n",
    "\n",
    "\n",
    "\n",
    "### Contenido\n",
    "\n",
    "1. [Introducción](#introduccion)\n",
    "1. [Fuentes de Datos](#fuentes-datos)\n",
    "1. [Carga de Librerías](#carga-librerias)\n",
    "1. [Carga y limpieza](#carga-historico)\n",
    "2. [Análisis de tendencias](#viz)\n",
    "\n",
    "   \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "933530b2-55b5-43cd-a4ae-78782267d79d",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Contenido\n",
    "\n",
    "## 1. Introducción<a name=\"introduccion\"></a>\n",
    "\n",
    "El desempleo es uno de los indicadores clave para evaluar la salud económica de un país. En el Perú, entender las dinámicas del desempleo es crucial para diseñar políticas efectivas que apoyen a los grupos más vulnerables. Este proyecto busca analizar la evolución de la tasa de desempleo en Perú, identificando diferencias según edad, género y nivel educativo. Utilizando datos del Banco Central de Reserva del Perú (BCRP) y el INEI, proporcionaremos una comprensión detallada de las causas subyacentes del desempleo y sus tendencias.\n",
    "\n",
    "## 2. Fuentes de Datos<a name=\"fuentes-datos\"></a>\n",
    "\n",
    "- Instituto Nacional de Estadística e Informática (INEI): Datos sobre la población en edad de trabajar (PET), la población económicamente activa (PEA), y la población económicamente inactiva (PEI), así como su edad y género.\n",
    "- Banco Central de Reserva del Perú (BCRP): Datos sobre la tasa de desempleo y otros indicadores económicos relevantes.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0dcdf1bb-1e1f-488b-8895-9390752a714a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pyreadstat in c:\\users\\dho_d\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (1.2.7)"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: You are using pip version 22.0.4; however, version 24.0 is available.\n",
      "You should consider upgrading via the 'C:\\Users\\DHO_d\\AppData\\Local\\Programs\\Python\\Python310\\python.exe -m pip install --upgrade pip' command.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Requirement already satisfied: pandas>=1.2.0 in c:\\users\\dho_d\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pyreadstat) (2.1.4)\n",
      "Requirement already satisfied: numpy<2,>=1.22.4 in c:\\users\\dho_d\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pandas>=1.2.0->pyreadstat) (1.23.5)\n",
      "Requirement already satisfied: tzdata>=2022.1 in c:\\users\\dho_d\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pandas>=1.2.0->pyreadstat) (2023.3)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\dho_d\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pandas>=1.2.0->pyreadstat) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\dho_d\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pandas>=1.2.0->pyreadstat) (2022.7)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\dho_d\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from python-dateutil>=2.8.2->pandas>=1.2.0->pyreadstat) (1.16.0)\n"
     ]
    }
   ],
   "source": [
    "# Librería para podeer leer bases de datos .sav del INEI\n",
    "!pip install pyreadstat"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d895bdeb-8524-4706-9312-7bce26c780fa",
   "metadata": {
    "tags": []
   },
   "source": [
    "## 3. Carga de librerías<a name=\"carga-librerias\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a751c5c7-20d8-41fb-833f-8b730765ae87",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import pyreadstat"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "790e70e6-da4f-4261-bdcc-54a862b1a435",
   "metadata": {
    "tags": []
   },
   "source": [
    "## 4. Carga y limpieza <a name=\"carga-historico\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d143f2d5-72b0-42da-ae9e-26ca3cd236cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PANO</th>\n",
       "      <th>PMES</th>\n",
       "      <th>CONGLOME</th>\n",
       "      <th>VIVIENDA</th>\n",
       "      <th>HOGAR</th>\n",
       "      <th>CODPERSO</th>\n",
       "      <th>DOMINIO</th>\n",
       "      <th>ESTRATO</th>\n",
       "      <th>CODPANEL</th>\n",
       "      <th>P103</th>\n",
       "      <th>...</th>\n",
       "      <th>P219</th>\n",
       "      <th>P220</th>\n",
       "      <th>P222</th>\n",
       "      <th>OCU200</th>\n",
       "      <th>I211A</th>\n",
       "      <th>I212A</th>\n",
       "      <th>D211B</th>\n",
       "      <th>INGPRIN</th>\n",
       "      <th>INGTOT</th>\n",
       "      <th>FACTOR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2004</td>\n",
       "      <td>01</td>\n",
       "      <td>032873</td>\n",
       "      <td>016</td>\n",
       "      <td>11</td>\n",
       "      <td>01</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>02101101</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>950.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>259.250147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2004</td>\n",
       "      <td>01</td>\n",
       "      <td>032873</td>\n",
       "      <td>016</td>\n",
       "      <td>11</td>\n",
       "      <td>02</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>02101102</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>317.282692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2004</td>\n",
       "      <td>01</td>\n",
       "      <td>032873</td>\n",
       "      <td>016</td>\n",
       "      <td>11</td>\n",
       "      <td>03</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>02101103</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>324.569805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2004</td>\n",
       "      <td>01</td>\n",
       "      <td>032873</td>\n",
       "      <td>016</td>\n",
       "      <td>11</td>\n",
       "      <td>04</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>02101104</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>311.134857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2004</td>\n",
       "      <td>01</td>\n",
       "      <td>032873</td>\n",
       "      <td>028</td>\n",
       "      <td>11</td>\n",
       "      <td>01</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>02101101</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>259.250147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19583</th>\n",
       "      <td>2004</td>\n",
       "      <td>03</td>\n",
       "      <td>053979</td>\n",
       "      <td>053</td>\n",
       "      <td>11</td>\n",
       "      <td>02</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>04031102</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>320.0</td>\n",
       "      <td>416.152424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19584</th>\n",
       "      <td>2004</td>\n",
       "      <td>03</td>\n",
       "      <td>053979</td>\n",
       "      <td>053</td>\n",
       "      <td>11</td>\n",
       "      <td>03</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>04031103</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>346.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>346.4</td>\n",
       "      <td>346.4</td>\n",
       "      <td>473.845262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19585</th>\n",
       "      <td>2004</td>\n",
       "      <td>03</td>\n",
       "      <td>053979</td>\n",
       "      <td>053</td>\n",
       "      <td>11</td>\n",
       "      <td>04</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>04031104</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>280.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>280.0</td>\n",
       "      <td>280.0</td>\n",
       "      <td>436.518840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19586</th>\n",
       "      <td>2004</td>\n",
       "      <td>03</td>\n",
       "      <td>053979</td>\n",
       "      <td>053</td>\n",
       "      <td>11</td>\n",
       "      <td>05</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>04031105</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>120.0</td>\n",
       "      <td>330.0</td>\n",
       "      <td>330.0</td>\n",
       "      <td>416.152424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19587</th>\n",
       "      <td>2004</td>\n",
       "      <td>03</td>\n",
       "      <td>053979</td>\n",
       "      <td>053</td>\n",
       "      <td>11</td>\n",
       "      <td>06</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>04031106</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>385.589918</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19588 rows × 87 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       PANO PMES CONGLOME VIVIENDA HOGAR CODPERSO  DOMINIO  ESTRATO  CODPANEL  \\\n",
       "0      2004   01   032873      016    11       01      8.0      1.0  02101101   \n",
       "1      2004   01   032873      016    11       02      8.0      1.0  02101102   \n",
       "2      2004   01   032873      016    11       03      8.0      1.0  02101103   \n",
       "3      2004   01   032873      016    11       04      8.0      1.0  02101104   \n",
       "4      2004   01   032873      028    11       01      8.0      1.0  02101101   \n",
       "...     ...  ...      ...      ...   ...      ...      ...      ...       ...   \n",
       "19583  2004   03   053979      053    11       02      8.0      1.0  04031102   \n",
       "19584  2004   03   053979      053    11       03      8.0      1.0  04031103   \n",
       "19585  2004   03   053979      053    11       04      8.0      1.0  04031104   \n",
       "19586  2004   03   053979      053    11       05      8.0      1.0  04031105   \n",
       "19587  2004   03   053979      053    11       06      8.0      1.0  04031106   \n",
       "\n",
       "       P103  ...  P219  P220  P222  OCU200  I211A  I212A  D211B  INGPRIN  \\\n",
       "0       1.0  ...   NaN   NaN   5.0     1.0    NaN  950.0    NaN   1000.0   \n",
       "1       2.0  ...   NaN   1.0   5.0     3.0    NaN    NaN    NaN      NaN   \n",
       "2       3.0  ...   NaN   NaN   5.0     1.0    NaN    NaN    NaN      0.0   \n",
       "3       3.0  ...   NaN   NaN   NaN     NaN    NaN    NaN    NaN      NaN   \n",
       "4       1.0  ...   NaN   1.0   5.0     3.0    NaN    NaN    NaN      NaN   \n",
       "...     ...  ...   ...   ...   ...     ...    ...    ...    ...      ...   \n",
       "19583   6.0  ...   NaN   NaN   5.0     1.0    NaN  100.0    NaN    100.0   \n",
       "19584   6.0  ...   NaN   NaN   5.0     1.0  346.4    NaN    0.0    346.4   \n",
       "19585   6.0  ...   NaN   NaN   5.0     1.0    NaN  280.0    NaN    280.0   \n",
       "19586   6.0  ...   NaN   NaN   5.0     1.0  210.0    NaN  120.0    330.0   \n",
       "19587   6.0  ...   NaN   NaN   NaN     NaN    NaN    NaN    NaN      NaN   \n",
       "\n",
       "       INGTOT      FACTOR  \n",
       "0      1000.0  259.250147  \n",
       "1         NaN  317.282692  \n",
       "2         0.0  324.569805  \n",
       "3         NaN  311.134857  \n",
       "4         NaN  259.250147  \n",
       "...       ...         ...  \n",
       "19583   320.0  416.152424  \n",
       "19584   346.4  473.845262  \n",
       "19585   280.0  436.518840  \n",
       "19586   330.0  416.152424  \n",
       "19587     NaN  385.589918  \n",
       "\n",
       "[19588 rows x 87 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Leemos y observamos el primer dataset\n",
    "\n",
    "df,meta = pyreadstat.read_sav(r\"EPEN/2004/Epe-Personas Ene-Feb-Mar-2004.sav\")\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55ba5b9e-7757-48d8-972b-cf955298a0ac",
   "metadata": {},
   "source": [
    "La EPE está diseñada para proveer al país resultados mensuales sobre empleo\n",
    "e ingresos de Lima Metropolitana y la Provincia Constitucional del Callao por trimestres móviles, a través\n",
    "de un cuestionario corto, aplicada para la población de 14 y más años de edad. Investiga las principales\n",
    "características demográficas de los miembros de los hogares, empleo (ocupación, actividad económica,\n",
    "tamaño de empresa), ingresos por trabajo, desocupados (búsqueda, duración del desempleo), aseguramiento\n",
    "en salud, entre otras vari\n",
    "\n",
    "Con los resultados de la EPE, se informa al país, la situación del empleo e ingresos en Lima Metropolitana de\n",
    "manera mensual. La EPE investiga mensualmente 1600 viviendas particulares y los resultados se presentan\n",
    "como promedio de trimestres móvile\n",
    "\n",
    "Entre sus objetivos generales, proveer al país información estadística continua sobre el mercado laboral\n",
    "peruano con representación nacional, departamental y principales ciudades. Asimismo, proporcionar en el\n",
    "corto plazo indicadores de empleo a nivel nacional."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b4aa9321-31cb-4704-9c49-9554f669ee73",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Como las EPEN están en organizadas en trimestres\n",
    "# creamos una función para cargar, las 4 datasets de cada año\n",
    "# y juntarlas en una sola"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e502e630-ada4-4bdf-9f27-f267725ab4ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Procesado y almacenado en memoria: 2004\n",
      "Procesado y almacenado en memoria: 2005\n",
      "Procesado y almacenado en memoria: 2006\n",
      "Procesado y almacenado en memoria: 2007\n",
      "Procesado y almacenado en memoria: 2008\n",
      "Procesado y almacenado en memoria: 2009\n",
      "Procesado y almacenado en memoria: 2010\n",
      "Procesado y almacenado en memoria: 2011\n",
      "Procesado y almacenado en memoria: 2012\n",
      "Procesado y almacenado en memoria: 2013\n",
      "Procesado y almacenado en memoria: 2014\n",
      "Procesado y almacenado en memoria: 2015\n",
      "Procesado y almacenado en memoria: 2016\n",
      "Procesado y almacenado en memoria: 2017\n",
      "Procesado y almacenado en memoria: 2018\n",
      "Procesado y almacenado en memoria: 2019\n",
      "Procesado y almacenado en memoria: 2020\n",
      "Procesado y almacenado en memoria: 2021\n",
      "Procesado y almacenado en memoria: 2022\n"
     ]
    }
   ],
   "source": [
    "# Directorio base\n",
    "base_dir = \"C:\\\\Users\\\\DHO_d\\\\OneDrive\\\\Proyecto_Integrador_HP\\\\EPEN\"\n",
    "\n",
    "# Años a procesar\n",
    "years = range(2004, 2023)\n",
    "\n",
    "# Diccionario para almacenar los DataFrames de cada año\n",
    "annual_dfs = {}\n",
    "\n",
    "# Función para procesar los archivos de cada año\n",
    "def process_year(year):\n",
    "    year_dir = os.path.join(base_dir, str(year))\n",
    "    # Listar todos los archivos SPSS en el directorio del año\n",
    "    spss_files = [f for f in os.listdir(year_dir) if f.endswith('.sav')]\n",
    "    \n",
    "    # Leer y concatenar todos los archivos SPSS del año\n",
    "    dfs = []\n",
    "    for spss_file in spss_files:\n",
    "        file_path = os.path.join(year_dir, spss_file)\n",
    "        df, meta = pyreadstat.read_sav(file_path)\n",
    "        dfs.append(df)\n",
    "    \n",
    "    # Concatenar todos los dataframes del año\n",
    "    year_df = pd.concat(dfs, ignore_index=True)\n",
    "    \n",
    "    # Guardar el dataframe en el diccionario\n",
    "    annual_dfs[year] = year_df\n",
    "    print(f\"Procesado y almacenado en memoria: {year}\")\n",
    "\n",
    "# Procesar cada año\n",
    "for year in years:\n",
    "    process_year(year)\n",
    "    \n",
    "\n",
    "# Los DataFrames ahora están almacenados en el diccionario annual_dfs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a0a17615",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Al intentar concatear las df por año en una sola df nos encontramos con un error.\n",
    "\n",
    "# Concatenar todos los DataFrames anuales en uno solo\n",
    "all_years_df = pd.concat(annual_dfs.values(), ignore_index=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6254535f-62a3-42ba-81f2-9a6c3718e9df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PANO</th>\n",
       "      <th>PMES</th>\n",
       "      <th>CONGLOME</th>\n",
       "      <th>VIVIENDA</th>\n",
       "      <th>HOGAR</th>\n",
       "      <th>CODPERSO</th>\n",
       "      <th>DOMINIO</th>\n",
       "      <th>ESTRATO</th>\n",
       "      <th>CODPANEL</th>\n",
       "      <th>P103</th>\n",
       "      <th>...</th>\n",
       "      <th>fa_jas20</th>\n",
       "      <th>fa_ond20</th>\n",
       "      <th>fa_amj21</th>\n",
       "      <th>fa_efm21</th>\n",
       "      <th>fa_jas21</th>\n",
       "      <th>fa_ond21</th>\n",
       "      <th>fa_amj22</th>\n",
       "      <th>fa_efm22</th>\n",
       "      <th>fa_jas22</th>\n",
       "      <th>fa_nde22</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2004</td>\n",
       "      <td>04</td>\n",
       "      <td>032873</td>\n",
       "      <td>011</td>\n",
       "      <td>11</td>\n",
       "      <td>01</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>04041101</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2004</td>\n",
       "      <td>04</td>\n",
       "      <td>032873</td>\n",
       "      <td>011</td>\n",
       "      <td>11</td>\n",
       "      <td>02</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>04041102</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2004</td>\n",
       "      <td>04</td>\n",
       "      <td>032873</td>\n",
       "      <td>011</td>\n",
       "      <td>11</td>\n",
       "      <td>03</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>04041103</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2004</td>\n",
       "      <td>04</td>\n",
       "      <td>032873</td>\n",
       "      <td>011</td>\n",
       "      <td>11</td>\n",
       "      <td>04</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>04041104</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2004</td>\n",
       "      <td>04</td>\n",
       "      <td>032873</td>\n",
       "      <td>011</td>\n",
       "      <td>11</td>\n",
       "      <td>05</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>04041105</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1208099</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1682.162810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1208100</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1208101</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1188.215310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1208102</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1700.566112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1208103</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1253.206934</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1208104 rows × 260 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         PANO PMES CONGLOME VIVIENDA HOGAR CODPERSO  DOMINIO  ESTRATO  \\\n",
       "0        2004   04   032873      011    11       01      8.0      1.0   \n",
       "1        2004   04   032873      011    11       02      8.0      1.0   \n",
       "2        2004   04   032873      011    11       03      8.0      1.0   \n",
       "3        2004   04   032873      011    11       04      8.0      1.0   \n",
       "4        2004   04   032873      011    11       05      8.0      1.0   \n",
       "...       ...  ...      ...      ...   ...      ...      ...      ...   \n",
       "1208099   NaN  NaN      NaN      NaN   NaN      NaN      NaN      NaN   \n",
       "1208100   NaN  NaN      NaN      NaN   NaN      NaN      NaN      NaN   \n",
       "1208101   NaN  NaN      NaN      NaN   NaN      NaN      NaN      NaN   \n",
       "1208102   NaN  NaN      NaN      NaN   NaN      NaN      NaN      NaN   \n",
       "1208103   NaN  NaN      NaN      NaN   NaN      NaN      NaN      NaN   \n",
       "\n",
       "         CODPANEL  P103  ...  fa_jas20  fa_ond20  fa_amj21  fa_efm21  \\\n",
       "0        04041101   1.0  ...       NaN       NaN       NaN       NaN   \n",
       "1        04041102   2.0  ...       NaN       NaN       NaN       NaN   \n",
       "2        04041103   3.0  ...       NaN       NaN       NaN       NaN   \n",
       "3        04041104   3.0  ...       NaN       NaN       NaN       NaN   \n",
       "4        04041105   3.0  ...       NaN       NaN       NaN       NaN   \n",
       "...           ...   ...  ...       ...       ...       ...       ...   \n",
       "1208099       NaN   NaN  ...       NaN       NaN       NaN       NaN   \n",
       "1208100       NaN   NaN  ...       NaN       NaN       NaN       NaN   \n",
       "1208101       NaN   NaN  ...       NaN       NaN       NaN       NaN   \n",
       "1208102       NaN   NaN  ...       NaN       NaN       NaN       NaN   \n",
       "1208103       NaN   NaN  ...       NaN       NaN       NaN       NaN   \n",
       "\n",
       "         fa_jas21  fa_ond21  fa_amj22  fa_efm22  fa_jas22     fa_nde22  \n",
       "0             NaN       NaN       NaN       NaN       NaN          NaN  \n",
       "1             NaN       NaN       NaN       NaN       NaN          NaN  \n",
       "2             NaN       NaN       NaN       NaN       NaN          NaN  \n",
       "3             NaN       NaN       NaN       NaN       NaN          NaN  \n",
       "4             NaN       NaN       NaN       NaN       NaN          NaN  \n",
       "...           ...       ...       ...       ...       ...          ...  \n",
       "1208099       NaN       NaN       NaN       NaN       NaN  1682.162810  \n",
       "1208100       NaN       NaN       NaN       NaN       NaN          NaN  \n",
       "1208101       NaN       NaN       NaN       NaN       NaN  1188.215310  \n",
       "1208102       NaN       NaN       NaN       NaN       NaN  1700.566112  \n",
       "1208103       NaN       NaN       NaN       NaN       NaN  1253.206934  \n",
       "\n",
       "[1208104 rows x 260 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_years_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "71678769-3530-4e32-a1e6-43112a367698",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['PANO', 'PMES', 'CONGLOME', 'VIVIENDA', 'HOGAR', 'CODPERSO', 'DOMINIO',\n",
       "       'ESTRATO', 'CODPANEL', 'P103',\n",
       "       ...\n",
       "       'fa_jas20', 'fa_ond20', 'fa_amj21', 'fa_efm21', 'fa_jas21', 'fa_ond21',\n",
       "       'fa_amj22', 'fa_efm22', 'fa_jas22', 'fa_nde22'],\n",
       "      dtype='object', length=260)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_years_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "95ea2903-cada-427c-85b9-934d8769bb14",
   "metadata": {},
   "outputs": [],
   "source": [
    "#El error se debe a que las df tienen columnas repetidas (es decir con el mismo label), por eso, filtraremos solo las columnas únicas.\n",
    "\n",
    "\n",
    "def remove_duplicate_columns(df):\n",
    "    df.columns = df.columns.str.lower()\n",
    "    df = df.loc[:, ~df.columns.duplicated()]\n",
    "     \n",
    "    return df\n",
    "\n",
    "# Eliminar columnas duplicadas en cada DataFrame anual\n",
    "for year, df in annual_dfs.items():\n",
    "    annual_dfs[year] = remove_duplicate_columns(df)\n",
    "    # Crear columna año \n",
    "    annual_dfs[year]['año'] = year\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b9f47320-98c5-4d38-a5bf-e2db5c017055",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Concatenar todos los DataFrames anuales en uno solo\n",
    "all_years_df = pd.concat(annual_dfs.values(), ignore_index=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "10aabdb3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0          2004\n",
       "1          2004\n",
       "2          2004\n",
       "3          2004\n",
       "4          2004\n",
       "           ... \n",
       "1208099    2022\n",
       "1208100    2022\n",
       "1208101    2022\n",
       "1208102    2022\n",
       "1208103    2022\n",
       "Name: año, Length: 1208104, dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_years_df['año']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49cf59ff-2bf0-42a6-b246-9567220d108c",
   "metadata": {
    "tags": []
   },
   "source": [
    "## 5. Análisis de tendencias<a name=\"viz\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "93ac5f91",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Renombramos los códigos con su significado, según el diccionario del EPEN, INEI.\n",
    "\n",
    "all_years_df.rename(columns={'p109a':'nivel', 'ocu200':'ocupacion', 'p107':'gender','p108':'edad'}, inplace=True)\n",
    "\n",
    "\n",
    "# Filtramos solo las columnas que nos son de utilidad\n",
    "all_years_df2 = all_years_df[['año','nivel', 'ocupacion','gender','edad']]\n",
    "all_years_df2 = all_years_df2.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "3325cfbe-4dd1-428c-9265-387468c98017",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Función para calcular la TDA\n",
    "\n",
    "def calculate_tda(df):\n",
    "    tda = (df['ocupacion'] == 2).sum() / ((df['ocupacion'] == 1).sum() + (df['ocupacion'] == 2).sum()) * 100\n",
    "    return tda\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "71569aa0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>año</th>\n",
       "      <th>tda</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2004</td>\n",
       "      <td>9.556302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2005</td>\n",
       "      <td>9.908238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2006</td>\n",
       "      <td>8.711178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2007</td>\n",
       "      <td>8.365534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2008</td>\n",
       "      <td>8.331982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2009</td>\n",
       "      <td>8.044280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2010</td>\n",
       "      <td>7.423779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2011</td>\n",
       "      <td>7.606232</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2012</td>\n",
       "      <td>6.401717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2013</td>\n",
       "      <td>5.429331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2014</td>\n",
       "      <td>5.424148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2015</td>\n",
       "      <td>5.641011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2016</td>\n",
       "      <td>5.798012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2017</td>\n",
       "      <td>6.140141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2018</td>\n",
       "      <td>6.097117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2019</td>\n",
       "      <td>6.149888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2020</td>\n",
       "      <td>12.651605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2021</td>\n",
       "      <td>10.386540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2022</td>\n",
       "      <td>7.991803</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     año        tda\n",
       "0   2004   9.556302\n",
       "1   2005   9.908238\n",
       "2   2006   8.711178\n",
       "3   2007   8.365534\n",
       "4   2008   8.331982\n",
       "5   2009   8.044280\n",
       "6   2010   7.423779\n",
       "7   2011   7.606232\n",
       "8   2012   6.401717\n",
       "9   2013   5.429331\n",
       "10  2014   5.424148\n",
       "11  2015   5.641011\n",
       "12  2016   5.798012\n",
       "13  2017   6.140141\n",
       "14  2018   6.097117\n",
       "15  2019   6.149888\n",
       "16  2020  12.651605\n",
       "17  2021  10.386540\n",
       "18  2022   7.991803"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# La tda es la tasa de desocupación abierta, que se calcula como el número de desocupados abiertos (2) dividido por la población económicamente \n",
    "# activa (ocupados (1) + desocupados abiertos(2)) multiplicado por 100.)\n",
    "\n",
    "# Primero hallemos la TDA por año y la almacenamos en una nueva df \n",
    "tda = all_years_df2.groupby('año').apply(calculate_tda)\n",
    "\n",
    "tda = pd.DataFrame(tda, columns=['tda'])\n",
    "tda.reset_index(inplace=True)\n",
    "tda\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4548f923-a198-4486-8462-9971c56dbab5",
   "metadata": {},
   "source": [
    "#### Observación\n",
    "Observamos que los porcentajes de TDA, coinciden con las estadísticas del BCR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "44de1036",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Hacemos un grafico de linea para ver la evolución de la TDA en el tiempo\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(tda['año'], tda['tda'], marker='o')\n",
    "plt.title('Tasa de desocupación abierta (TDA) en Lima (2004-2022)')\n",
    "plt.xlabel('Año')\n",
    "plt.ylabel('TDA (%)')\n",
    "plt.grid()\n",
    "plt.xticks(ticks=tda['año'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "ce0208bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Función para graficar la TDA\n",
    "def plot_tda(df, title):\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    plt.plot(df['año'], df['tda'], marker='o')\n",
    "    plt.title(title)\n",
    "    plt.xlabel('Año')\n",
    "    plt.ylabel('TDA (%)')\n",
    "    plt.grid()\n",
    "    plt.xticks(ticks=df['año'])\n",
    "    plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ea183a2-1a5f-4487-b678-77177aa4c2cd",
   "metadata": {
    "tags": []
   },
   "source": [
    "### 5.1 Tasa de actividad según género\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "83f6dbc0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "def plot_gender(df):\n",
    "    # Filtramos solo las mujeres (gender=2)\n",
    "    tda_m = df[df['gender']==2].groupby('año').apply(calculate_tda)\n",
    "\n",
    "    tda_m = pd.DataFrame(tda_m, columns=['tda'])\n",
    "    tda_m.reset_index(inplace=True)\n",
    "\n",
    "    # Filtramos solo los hombres (gender=1)\n",
    "\n",
    "    tda_h = df[df['gender']==1].groupby('año').apply(calculate_tda)\n",
    "    tda_h= pd.DataFrame(tda_h, columns=['tda'])\n",
    "    tda_h.reset_index(inplace=True)\n",
    "\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    plt.plot(tda_m['año'], tda_m['tda'], marker='o', label='Mujeres', color='pink')\n",
    "    plt.plot(tda_h['año'], tda_h['tda'], marker='o', label='Hombres', color='skyblue')\n",
    "    plt.title('Tasa de desocupación abierta (TDA) en Lima por género (2004-2022)')\n",
    "    plt.xlabel('Año')\n",
    "    plt.ylabel('TDA (%)')\n",
    "    for i, row in tda_m.iterrows():\n",
    "        plt.text(row['año'], row['tda'], f\"{row['tda']:.2f}\", ha='center', va='bottom')\n",
    "    for i, row in tda_h.iterrows():\n",
    "        plt.text(row['año'], row['tda'], f\"{row['tda']:.2f}\", ha='center', va='bottom')\n",
    "\n",
    "\n",
    "\n",
    "    plt.grid()\n",
    "    plt.xticks(ticks=tda_m['año'])\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "\n",
    "plot_gender(all_years_df2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae72a8d5-9107-4731-8151-37e9e9bf2107",
   "metadata": {},
   "source": [
    "Existe mayor participación de los hombres en la fuerza de trabajo; así en el año 2022, el 93,49% de los\n",
    "hombres en edad de trabajar participaban en la fuerza de trabajo, siendo 3,15 puntos porcentuales más que\n",
    "las mujeres (90,34%). \n",
    "\n",
    "En la pandemia, el 89,3% de los hombres en edad de trabajar participa del mercado\n",
    "de trabajo, siendo 2,8 puntos porcentuales más que las mujeres (86,5).\n",
    "\n",
    "El 2013 fue el año con menor TDA para los hombres (4.34), y el 2014 para las mujeres (6.21) \n",
    "\n",
    "En tanto con respecto a los otros años, la brecha\n",
    "de género es en promedio de 3,3 puntos porcentuales."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da7c2865-74e8-4454-bdf6-832ba136b472",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "### 5.2 Niveles de empleo según nivel educativo de la PEA\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81762f76-a4f0-4e05-91f4-4295d7b30e3a",
   "metadata": {},
   "source": [
    "Para categorizar por nivel educativo, aplicaremos el mismo procedimiento anterior, pero agrupando por la columna 'nivel'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f668d673",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Función para procesar los niveles educativos\n",
    "def process_education_levels(df):\n",
    "    niveles = {\n",
    "        1: 'Sin Nivel',\n",
    "        2: 'Inicial',\n",
    "        3: 'Primaria Incompleta',\n",
    "        4: 'Primaria Completa',\n",
    "        5: 'Secundaria Incompleta',\n",
    "        6: 'Secundaria Completa',\n",
    "        7: 'Superior No Universitaria Incompleta',\n",
    "        8: 'Superior No Universitaria Completa',\n",
    "        9: 'Superior Universitaria Incompleta',\n",
    "        10: 'Superior Universitaria Completa'\n",
    "    }\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    for i in range(1, 11):\n",
    "        tda = df[df['nivel']==i].groupby('año').apply(calculate_tda)\n",
    "        tda = pd.DataFrame(tda, columns=['tda'])\n",
    "        tda.reset_index(inplace=True)\n",
    "        plt.plot(tda['año'], tda['tda'], marker='o', label=niveles[i])\n",
    "    plt.title('Tasa de desocupación abierta (TDA) en Lima por nivel educativo (2004-2022)')\n",
    "    plt.xlabel('Año')\n",
    "    plt.ylabel('TDA (%)')\n",
    "    plt.grid()\n",
    "    plt.xticks(ticks=tda['año'])\n",
    "    plt.legend( bbox_to_anchor=(1.05, 1), loc='upper left')\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "process_education_levels(all_years_df2)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4776455-267f-4a5f-a3e1-0c122e1ceb34",
   "metadata": {},
   "source": [
    "De acuerdo al nivel de educación alcanzado por la PEA, mayor proporción de PEA ocupada con empleo\n",
    "adecuado tienen educación universitaria (66,4%), seguido por los que tienen educación superior no\n",
    "universitaria (60,1%), educación secundaria 45,0% y primaria o menor nivel (27,8%). En tanto, los ocupados\n",
    "subempleados en mayor proporción tienen primaria o menor nivel (70,2%). "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53dacfc8-4fdf-4c33-9aac-d2da65191e47",
   "metadata": {
    "tags": []
   },
   "source": [
    "### 5.3 Tasa de actividad según grandes grupos de edad\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6aa48ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Función para procesar los grupos de edad\n",
    "def process_age_groups(df):\n",
    "    tda24 = df[(df['edad']>=14) &(df['edad']<=24)].groupby('año').apply(calculate_tda)\n",
    "    tda44 = df[(df['edad']>=25) &(df['edad']<=44)].groupby('año').apply(calculate_tda)\n",
    "    tda45 = df[(df['edad']>=45)].groupby('año').apply(calculate_tda)\n",
    "\n",
    "    tda24 = pd.DataFrame(tda24, columns=['tda'])\n",
    "    tda24.reset_index(inplace=True)\n",
    "\n",
    "    tda44 = pd.DataFrame(tda44, columns=['tda'])\n",
    "    tda44.reset_index(inplace=True)\n",
    "\n",
    "    tda45 = pd.DataFrame(tda45, columns=['tda'])\n",
    "    tda45.reset_index(inplace=True)\n",
    "\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    plt.plot(tda24['año'], tda24['tda'], marker='o', label='14-24 años', color='orange')\n",
    "    plt.plot(tda44['año'], tda44['tda'], marker='o', label='25-44 años', color='green')\n",
    "    plt.plot(tda45['año'], tda45['tda'], marker='o', label='45+ años', color='red')\n",
    "    plt.title('Tasa de desocupación abierta (TDA) en Lima por edad (2004-2022)')\n",
    "    plt.xlabel('Año')\n",
    "    plt.ylabel('TDA (%)')\n",
    "    plt.grid()\n",
    "    plt.xticks(ticks=tda24['año'])\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "process_age_groups(all_years_df2)\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "859d9c56-dd42-4ca7-bac9-4a401e476ba6",
   "metadata": {},
   "source": [
    "La actividad laboral de los jóvenes (14 a 24 años) refleja la disponibilidad de oportunidades educativas. En el\n",
    "país, el 50,5% de los jóvenes integran la fuerza de trabajo, siendo esta proporción más elevada con 67,2%\n",
    "en el área rural, que en el área urbana, 47,1%. En el grupo de edad de 25 a 44 años de edad, el 85,6%\n",
    "participa en la fuerza de trabajo, en el área rural el 91,4% y en el área urbana el 84,5%. La población de 45\n",
    "a más años de edad, presentan una tasa de actividad de 69,4%, en el área rural es 85,0% y en área urbana\n",
    "de 66,1%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26c9ffc6-ae0f-491c-b1e4-d05b3a4ec26f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "edd306ee-bf40-4e7e-888c-3ff5abfe4827",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
